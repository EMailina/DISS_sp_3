/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diss_sp_3;

import OSPABA.IAnimDelegate;
import OSPABA.ISimDelegate;
import OSPABA.MessageForm;
import OSPABA.SimState;
import OSPABA.Simulation;
import OSPAnimator.IAnimator;
import OSPDataStruct.SimQueue;
import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.util.ArrayList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import objects.CustomerObject;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import simulation.MyMessage;
import simulation.MySimulation;
import threads.ChartThread;
import threads.ExtraThread;

/**
 *
 * @author Erik
 */
public class Diss_sp_3 extends javax.swing.JFrame implements ISimDelegate, IAnimDelegate {

    //  private XYSeries series = new XYSeries("Average waiting time");
    //  private JFreeChart chart1 = null;
    //  private XYSeriesCollection database1 = new XYSeriesCollection();
    //  private ChartPanel chartPanel1 = null;
    private XYSeries series = new XYSeries("Graph ");
    private JFreeChart chart = null;
    private XYSeriesCollection database = new XYSeriesCollection();
    private ChartPanel chartPanel = null;
    ExtraThread threadLogic;
    ChartThread threadGraph;
    private RunType runType;
    private boolean refreshGuiChanges = false;
//    MonteCarloBase base;
    private MySimulation simulation = null;
    private ManagerDependencies managerDep;
    private final String FREE = "FREE";
    private final String PAUSE = "PAUSE";
    private final String DASH = "-";
    ArrayList<Double> values = new ArrayList<>();
    private int offset = 0;
    
    public Diss_sp_3() {
        initComponents();
        panelGraph2.setVisible(false);
        cleanLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartButton = new javax.swing.JButton();
        EditCountOfReplications = new javax.swing.JTextField();
        StopButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        panelGraph2 = new javax.swing.JPanel();
        pauseButton = new javax.swing.JButton();
        speedSlider = new javax.swing.JSlider();
        SpeedLabel = new javax.swing.JLabel();
        startSimulation = new javax.swing.JButton();
        countOfEmployees2Box = new javax.swing.JTextField();
        countOfEmployees1Box = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelTime = new javax.swing.JLabel();
        jLabelCountOfType1Employees = new javax.swing.JLabel();
        jLabelCountOfType2Employees = new javax.swing.JLabel();
        jLabelCountOfParkingPlaces = new javax.swing.JLabel();
        jLabelActualQueue = new javax.swing.JLabel();
        jLabelParking = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelCountReplication = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        countOfEmployees2Box1 = new javax.swing.JTextField();
        countOfEmployees1Box1 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        startSimulation2 = new javax.swing.JButton();
        startSimulation3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        checkboxValidation = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 600));
        setSize(new java.awt.Dimension(2127, 1600));
        getContentPane().setLayout(null);

        StartButton.setText("Start replications");
        StartButton.setName("startButton"); // NOI18N
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(StartButton);
        StartButton.setBounds(290, 60, 150, 32);

        EditCountOfReplications.setText("1");
        EditCountOfReplications.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCountOfReplicationsActionPerformed(evt);
            }
        });
        getContentPane().add(EditCountOfReplications);
        EditCountOfReplications.setBounds(147, 27, 121, 30);

        StopButton.setText("Stop");
        StopButton.setName("startButton"); // NOI18N
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(StopButton);
        StopButton.setBounds(630, 20, 140, 32);

        jLabel1.setText("Count of replications");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(17, 33, 117, 16);

        panelGraph2.setLayout(null);
        getContentPane().add(panelGraph2);
        panelGraph2.setBounds(70, 160, 930, 380);

        pauseButton.setText("Pause / Continue");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(pauseButton);
        pauseButton.setBounds(630, 60, 140, 32);

        speedSlider.setMaximum(5);
        speedSlider.setMinimum(1);
        speedSlider.setValue(3);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });
        getContentPane().add(speedSlider);
        speedSlider.setBounds(450, 60, 170, 16);

        SpeedLabel.setText("Simulation speed: 3");
        getContentPane().add(SpeedLabel);
        SpeedLabel.setBounds(480, 30, 111, 16);

        startSimulation.setText("Start one Simulation");
        startSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulationActionPerformed(evt);
            }
        });
        getContentPane().add(startSimulation);
        startSimulation.setBounds(290, 20, 150, 32);

        countOfEmployees2Box.setText("17");
        getContentPane().add(countOfEmployees2Box);
        countOfEmployees2Box.setBounds(150, 110, 70, 30);

        countOfEmployees1Box.setText("4");
        getContentPane().add(countOfEmployees1Box);
        countOfEmployees1Box.setBounds(150, 70, 70, 30);

        jLabel4.setText("Employees 1:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 80, 75, 16);

        jLabel5.setText("Employees 2:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(60, 120, 75, 16);

        jLabel2.setText("loading...");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 370, 480, 16);

        jLabelTime.setText("Time:");
        jLabelTime.setToolTipText("");
        getContentPane().add(jLabelTime);
        jLabelTime.setBounds(30, 190, 236, 16);

        jLabelCountOfType1Employees.setText("loading...");
        getContentPane().add(jLabelCountOfType1Employees);
        jLabelCountOfType1Employees.setBounds(30, 220, 236, 16);

        jLabelCountOfType2Employees.setText("loading...");
        getContentPane().add(jLabelCountOfType2Employees);
        jLabelCountOfType2Employees.setBounds(30, 250, 236, 16);

        jLabelCountOfParkingPlaces.setText("loading...");
        getContentPane().add(jLabelCountOfParkingPlaces);
        jLabelCountOfParkingPlaces.setBounds(30, 280, 236, 16);

        jLabelActualQueue.setText("loading...");
        getContentPane().add(jLabelActualQueue);
        jLabelActualQueue.setBounds(30, 310, 236, 16);

        jLabelParking.setText("loading...");
        getContentPane().add(jLabelParking);
        jLabelParking.setBounds(30, 340, 236, 16);

        jLabel3.setText("loading...");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 400, 480, 16);

        jLabel6.setText("loading...");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(30, 430, 500, 16);

        jLabel7.setText("loading...");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(30, 460, 530, 16);

        jLabel9.setText("loading...");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(30, 520, 540, 16);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setText("Simulation");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(20, 150, 220, 24);

        jLabel8.setText("loading...");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(30, 250, 330, 16);

        jLabelCountReplication.setText("Time:");
        jLabelCountReplication.setToolTipText("");
        getContentPane().add(jLabelCountReplication);
        jLabelCountReplication.setBounds(30, 190, 214, 16);

        jLabel12.setText("loading...");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(30, 220, 320, 16);

        jLabel13.setText("loading...");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(30, 310, 330, 16);

        jLabel14.setText("loading...");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(30, 280, 330, 16);

        jLabel15.setText("loading...");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(30, 370, 570, 16);

        jLabel16.setText("loading...");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(30, 400, 520, 16);

        jLabel17.setText("loading...");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(30, 430, 580, 16);

        jLabel18.setText("loading...");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(30, 340, 520, 16);

        countOfEmployees2Box1.setText("2");
        getContentPane().add(countOfEmployees2Box1);
        countOfEmployees2Box1.setBounds(880, 60, 70, 30);

        countOfEmployees1Box1.setText("2");
        getContentPane().add(countOfEmployees1Box1);
        countOfEmployees1Box1.setBounds(880, 20, 70, 30);

        jLabel23.setText("Employees 1:");
        getContentPane().add(jLabel23);
        jLabel23.setBounds(790, 30, 75, 16);

        jLabel24.setText("Employees 2:");
        getContentPane().add(jLabel24);
        jLabel24.setBounds(790, 70, 75, 16);

        startSimulation2.setText("Dependency on group 2");
        startSimulation2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulation2ActionPerformed(evt);
            }
        });
        getContentPane().add(startSimulation2);
        startSimulation2.setBounds(960, 60, 170, 32);

        startSimulation3.setText("Dependency on group 1");
        startSimulation3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulation3ActionPerformed(evt);
            }
        });
        getContentPane().add(startSimulation3);
        startSimulation3.setBounds(960, 20, 170, 32);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Customer", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable4.setEnabled(false);
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(2).setMinWidth(150);
            jTable4.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Place", "Customer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable3.setEnabled(false);
        jScrollPane3.setViewportView(jTable3);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employer", "Customer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employer", "Customer", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setEnabled(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(2).setMinWidth(150);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel20.setText("Inspection (type 2)");

        jLabel22.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel22.setText("Parking");

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel21.setText("Queue for take-over and payment");

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel19.setText("Take-over Vehicle (type 1)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addGap(177, 177, 177)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(390, 100, 730, 440);

        jLabel10.setText("loading...");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(30, 490, 540, 16);

        checkboxValidation.setText("Validation");
        getContentPane().add(checkboxValidation);
        checkboxValidation.setBounds(300, 100, 90, 24);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        runType = runType.REPLICATIONS;
        startThreads();
    }//GEN-LAST:event_StartButtonActionPerformed

    private void EditCountOfReplicationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditCountOfReplicationsActionPerformed

    }//GEN-LAST:event_EditCountOfReplicationsActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // app.stopApplication();
        simulation.stopSimulation();
        if (simulation.getType() == RunType.DEPENDENCY_1 || simulation.getType() == RunType.DEPENDENCY_2) {
            managerDep.setStop(true);
        }

    }//GEN-LAST:event_StopButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // app.pauseOrContinueApp();
        if (simulation.isPaused()) {
            simulation.resumeSimulation();
        } else {
            simulation.pauseSimulation();
        }

    }//GEN-LAST:event_pauseButtonActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        SpeedLabel.setText("Simulation speed: " + speedSlider.getValue());
        if (simulation != null) {
            simulation.setSpeedChange(speedSlider.getValue());
        }
    }//GEN-LAST:event_speedSliderStateChanged

    private void startSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulationActionPerformed
        runType = runType.SIMULATION;
        startThreads();

    }//GEN-LAST:event_startSimulationActionPerformed

    private void startSimulation2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulation2ActionPerformed
        runType = runType.DEPENDENCY_2;
        values.clear();
        offset = 10;
        startThreads();
    }//GEN-LAST:event_startSimulation2ActionPerformed

    private void startSimulation3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulation3ActionPerformed
        runType = runType.DEPENDENCY_1;
        values.clear();
        offset = 1;
        startThreads();
    }//GEN-LAST:event_startSimulation3ActionPerformed
    
    public void setSimulation(MySimulation simulation) {
        this.simulation = simulation;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diss_sp_3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diss_sp_3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diss_sp_3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diss_sp_3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diss_sp_3().setVisible(true);
                
            }
        });
    }

    /*
        START NEW SIMULATION
     */
    public void startSimulation() throws IOException, Exception {
        simulation = new MySimulation();
        simulation.setType(runType);
        simulation.setCountOfEmployeeType1(Integer.valueOf(countOfEmployees1Box.getText()));
        simulation.setCountOfEmployeeType2(Integer.valueOf(countOfEmployees2Box.getText()));
        int countOfReplication = Integer.valueOf(EditCountOfReplications.getText());
        simulation.registerDelegate(this);
        
        if (runType == RunType.REPLICATIONS) {
            simulation.setValidationRun(checkboxValidation.isSelected());
            simulation.onSimulationWillStart(s -> {
               // System.out.println("simm...");
            });
            // simulation.simulate(countOfReplication, 480);
            simulation.onSimulationDidFinish(sim -> updateReplicationStats());
            
//            for (int i = 0; i < 1000; i++) {
//                simulation = new MySimulation(i);
//                simulation.setType(runType);
//                simulation.setCountOfEmployeeType1(Integer.valueOf(countOfEmployees1Box.getText()));
//                simulation.setCountOfEmployeeType2(Integer.valueOf(countOfEmployees2Box.getText()));
//                
//                simulation.setValidationRun(checkboxValidation.isSelected());
//               
                simulation.simulate(1, 480);
//                System.out.println("" + i + " | " +  simulation.getAvgTimeInSystem().mean());
//            }

            //app.replicate(this, countOfReplication, Integer.valueOf(countOfEmployees1Box.getText()), Integer.valueOf(countOfEmployees2Box.getText()), RunType.REPLICATIONS);
        } else if (runType == RunType.SIMULATION) {
            simulation.setValidationRun(checkboxValidation.isSelected());
            simulation.onSimulationWillStart(s -> {
                System.out.println("simm...");
            });
            simulation.setSpeedChange(speedSlider.getValue());
            simulation.simulate(1, 480);
        } else if (runType == RunType.DEPENDENCY_1) {
            managerDep = new ManagerDependencies();
            managerDep.findDependencyOnEmp1(this, Integer.valueOf(countOfEmployees2Box1.getText()), countOfReplication);
        } else if (runType == RunType.DEPENDENCY_2) {
            managerDep = new ManagerDependencies();
            managerDep.findDependencyOnEmp2(this, Integer.valueOf(countOfEmployees1Box1.getText()), countOfReplication);
        }
        
    }
    
    private void refreshCharts() throws IOException {
        panelGraph2.repaint();
    }
    
    private void startThreads() {
        if ((threadLogic == null && threadGraph == null) || (!threadLogic.isAlive() && !threadGraph.isAlive())) {
            
            threadLogic = new ExtraThread(this);
            threadLogic.start();
            threadGraph = new ChartThread(this);
            threadGraph.start();
        }
    }
    
    private void createLineChart(String name, String seriesName) throws IOException {
        panelGraph2.removeAll();
        panelGraph2.repaint();
        series = new XYSeries(seriesName);
        this.panelGraph2.repaint();
        database = new XYSeriesCollection();
        chart = ChartFactory.createXYLineChart(name, "count of employees", seriesName, database, PlotOrientation.VERTICAL, true, true, false);
        chartPanel = new ChartPanel(chart);
        XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.white);
        ((NumberAxis) plot.getRangeAxis()).setAutoRangeIncludesZero(false);
        this.panelGraph2.setLayout(new java.awt.BorderLayout());
        this.panelGraph2.add(chartPanel);
        this.panelGraph2.validate();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField EditCountOfReplications;
    private javax.swing.JLabel SpeedLabel;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JCheckBox checkboxValidation;
    private javax.swing.JTextField countOfEmployees1Box;
    private javax.swing.JTextField countOfEmployees1Box1;
    private javax.swing.JTextField countOfEmployees2Box;
    private javax.swing.JTextField countOfEmployees2Box1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelActualQueue;
    private javax.swing.JLabel jLabelCountOfParkingPlaces;
    private javax.swing.JLabel jLabelCountOfType1Employees;
    private javax.swing.JLabel jLabelCountOfType2Employees;
    private javax.swing.JLabel jLabelCountReplication;
    private javax.swing.JLabel jLabelParking;
    private javax.swing.JLabel jLabelTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JPanel panelGraph2;
    private javax.swing.JButton pauseButton;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton startSimulation;
    private javax.swing.JButton startSimulation2;
    private javax.swing.JButton startSimulation3;
    // End of variables declaration//GEN-END:variables

    public void startDraw() throws InterruptedException, IOException {
        
        cleanLabels();
        database.addSeries(series);
        try {
            if (RunType.DEPENDENCY_2 == runType) {
                panelGraph2.setVisible(true);
                cleanLabels();
                createLineChart("Average time in system and dependency with Employees (type 2)", "Average time in system");
            } else if (RunType.DEPENDENCY_1 == runType) {
                panelGraph2.setVisible(true);
                cleanLabels();
                createLineChart("Average queue length and dependency with Employees (type 1)", "Average queue length");
            } else {
                createLineChart("", "");
                panelGraph2.setVisible(false);
            }
        } catch (IOException ex) {
            Logger.getLogger(Diss_sp_3.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (RunType.SIMULATION == runType) {
            
            initializeTables();
        }
        while (true) {
            if (refreshGuiChanges) {
                refreshGuiChanges = false;
                
                if (runType == RunType.SIMULATION) {
                    updateSimStats();
                } else if (runType == RunType.DEPENDENCY_1) {
                    updateCharts();
                } else if (runType == RunType.DEPENDENCY_2) {
                    updateCharts();
                }
                
            }
            if (!threadLogic.isAlive()) {
                if (runType == RunType.SIMULATION) {
                    
                    updateSimStats();
                } else if (runType == RunType.REPLICATIONS) {
                    updateReplicationStats();
                } else {
                    updateCharts();
                }
                
                break;
            }
        }
        
    }
    
    private void updateSimStats() {
        
        jLabel2.setText("Average waiting time for vehicle take-over: " + simulation.agentReception().getWaitingTimeStat().mean());
        jLabel3.setText("Average time in system: " + simulation.agentEnviroment().getAverageTimeInSystem().mean());
        jLabel6.setText("Average free employees(type 1): " + simulation.agentReception().getEmployee().lengthStatistic().mean());
        jLabel7.setText("Average free employees(type 2): " + simulation.agentMechanics().getEmployee().lengthStatistic().mean());
        jLabelTime.setText("Time: " + simulation.getTime() + " (" + simulation.currentTime() + ")");
        
        jLabelCountOfType1Employees.setText("Actually working of employees(type 1): " + simulation.agentReception().getCountOfWorking());
        jLabelCountOfType2Employees.setText("Actually working of employees(type 2): " + simulation.agentMechanics().getCountOfWorking());
        jLabelCountOfParkingPlaces.setText("Count of occupied parking places: " + simulation.agentParking().getQueue().size());
        jLabelActualQueue.setText("Actual queue length(type 1): " + simulation.agentReception().getQueueTakeOver().size());
        jLabelParking.setText("Actual queue length(type 2): " + simulation.agentReception().getQueuePaying().size());
        jLabel9.setText("Average count of customers: " + simulation.agentEnviroment().getCustomers().lengthStatistic().mean());
        
        jLabel10.setText("Average queue of customers: " + simulation.agentReception().getQueueTakeOver().lengthStatistic().mean());
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //   jLabel16.setText("Average queue length: " + simulation.getAvgQueueLength().mean());

        // UPDATE EMPLOYEES TYPE 2
        ArrayList<CustomerObject> emp = simulation.agentMechanics().getGuiEmployers();
        for (int j = 0; j < simulation.agentMechanics().getTotalCountOfEmployees(); j++) {
            CustomerObject customer = emp.get(j);
            if (customer == null) {
                if (!model.getValueAt(j, 1).equals(FREE)) {
                    model.setValueAt(FREE, j, 1);
                }
            } else {
                if (customer.isInspectionRewrite() == true) {
                    model.setValueAt("Customer " + customer.getCount(), j, 1);
                } else if (customer.isPause()) {
                    model.setValueAt(PAUSE, j, 1);
                }
                
            }
        }

        // UPDATE EMPLOYEES TYPE 1
        model = (DefaultTableModel) jTable2.getModel();
        
        emp = simulation.agentReception().getGuiEmployers();
        for (int j = 0; j < simulation.agentReception().getTotalCountOfEmployees(); j++) {
            CustomerObject customer = emp.get(j);
            if (customer == null) {
                if (!model.getValueAt(j, 1).equals(FREE)) {
                    model.setValueAt(FREE, j, 1);
                    model.setValueAt(DASH, j, 2);
                }
            } else {
                if (!customer.isPause()) {
                    model.setValueAt("Customer " + customer.getCount(), j, 1);
                    
                    if (customer.isPaymentRewrite() == true) {
                        model.setValueAt("PAYMENT", j, 2);
                    } else if (customer.isTakeOverRewrite() == true) {
                        model.setValueAt("TAKE-OVER VEHICLE", j, 2);
                    }
                } else {
                    model.setValueAt(PAUSE, j, 1);
                    model.setValueAt(DASH, j, 2);
                }
            }
        }
        // UPDATE Parking
        model = (DefaultTableModel) jTable3.getModel();
        emp = simulation.agentParking().getParkingPlaces();
        for (int j = 0; j < simulation.agentParking().getTotalCountOfParkingPlaces(); j++) {
            CustomerObject customer = emp.get(j);
            if (customer == null) {
                if (!model.getValueAt(j, 1).equals(FREE)) {
                    model.setValueAt(FREE, j, 1);
                }
            } else {
                if (customer.isParkingRewrite() == true) {
                    model.setValueAt("Customer " + customer.getCount(), j, 1);
                }
            }
        }
//
//        // UPDATE queue
        model = (DefaultTableModel) jTable4.getModel();
        Queue<MessageForm> empQ = simulation.agentReception().getQueuePayingGui();
        ConcurrentLinkedQueue<MessageForm> customers = new ConcurrentLinkedQueue<>(empQ);
        Queue<MessageForm> e = simulation.agentReception().getQueueTakeOverGui();
        customers.addAll(e);
        int length = customers.size();
//ArrayList<CustomerObject> p = simulation.getParkingNew();
        // emp.addAll(p);
        for (int j = 0; j < length; j++) {
            CustomerObject customer = ((MyMessage) customers.poll()).getCustomer();
            
            if (customer == null) {
                if (!model.getValueAt(j, 1).equals(FREE)) {
                    model.setValueAt(FREE, j, 1);
                }
            } else {
                if (j < model.getRowCount()) {
                    model.setValueAt("Customer " + customer.getCount(), j, 1);
                    if (customer.isPark() == true) {
                        model.setValueAt("PARK", j, 2);
                    } else if (customer.isWaitingForPayment() == true) {
                        model.setValueAt("PAYMENT", j, 2);
                    } else {
                        model.setValueAt("TAKE-OVER VEHICLE", j, 2);
                    }
                } else {
                    if (customer.isPark() == true) {
                        model.addRow(new Object[]{"" + (j + 1), "Customer " + (j + 1), "PARK"});
                        
                    } else if (customer.isWaitingForPayment() == true) {
                        model.addRow(new Object[]{"" + (j + 1), "Customer " + (j + 1), "PAYMENT"});
                    } else {
                        model.addRow(new Object[]{"" + (j + 1), "Customer " + (j + 1), "TAKE-OVER VEHICLE"});
                    }
                }
            }
            
        }
        if (model.getRowCount() != length) {
            model.setRowCount(length);
        }
        
    }
    
    private void updateReplicationStats() {
        cleanLabels();
        
        jLabel12.setText("Average waiting time: " + simulation.getAvgWaitingTime().mean());
        jLabel18.setText("Average time in system: " + simulation.getAvgTimeInSystem().mean());
        jLabel14.setText("Average free employees(type 1): " + simulation.getAvgFreeEmp1().mean());
        jLabel13.setText("Average free employees(type 2): " + simulation.getAvgFreeEmp2().mean());
        jLabelCountReplication.setText("Replication: " + (simulation.currentReplication() + 1));
        jLabel8.setText("Average count of vehicles in system: " + simulation.getAvgCOuntOfVehicles().mean());
        if (simulation.currentReplication() >= 29) {
            jLabel15.setText("Time in system interval confidence: " + simulation.getAvgTimeInSystem().confidenceInterval_90()[0] + " - " + simulation.getAvgTimeInSystem().confidenceInterval_90()[1]);
            jLabel17.setText("Average count of customers interval confidence: " + simulation.getAvgCountOfCustomers().confidenceInterval_95()[0] + " - " + simulation.getAvgCountOfCustomers().confidenceInterval_95()[1]);
        }
        
        jLabel16.setText("Average count of customers: " + simulation.getAvgCountOfCustomers().mean());
        jLabel7.setText("Average queue length: " + simulation.getAvgQueueLength().mean());
    }
    
    public void cleanLabels() {
        jLabel11.setText("");
        
        if (runType == RunType.REPLICATIONS || runType == RunType.SIMULATION) {
            if (runType == RunType.REPLICATIONS) {
                jLabel11.setText("Replications");
                jPanel1.setVisible(false);
                
            } else {
                jLabel11.setText("Simulation");
                jPanel1.setVisible(true);
            }
            jScrollPane1.setViewportView(jTable1);
            jScrollPane2.setViewportView(jTable2);
            jScrollPane3.setViewportView(jTable3);
            jScrollPane4.setViewportView(jTable4);
            
        } else {
            jPanel1.setVisible(false);
            
        }
        jLabel2.setText("");
        jLabel3.setText("");
        jLabel6.setText("");
        jLabel7.setText("");
        jLabelTime.setText("");
        jLabelCountOfType1Employees.setText("");
        jLabelCountOfType2Employees.setText("");
        jLabelCountOfParkingPlaces.setText("");
        jLabelActualQueue.setText("");
        jLabelParking.setText("");
        jLabel9.setText("");
        jLabelCountReplication.setText("");
        jLabel12.setText("");
        jLabel8.setText("");
        jLabel14.setText("");
        jLabel13.setText("");
        jLabelCountReplication.setText("");
        jLabel8.setText("");
        jLabel15.setText("");
        jLabel17.setText("");
        jLabel18.setText("");
        jLabel16.setText("");
        jLabel10.setText("");
    }
    
    private void initializeTables() {
        simulation = (MySimulation) simulation;
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        jTable1.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable2.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable2.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable2.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        jTable3.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable3.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable4.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        jTable4.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        jTable4.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        
        updateTableHeader(jTable1);
        updateTableHeader(jTable2);
        updateTableHeader(jTable3);
        updateTableHeader(jTable4);
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (int j = 0; j < simulation.agentMechanics().getTotalCountOfEmployees(); j++) {
            model.addRow(new Object[]{"Employer " + (j + 1), FREE});
        }
        
        model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int j = 0; j < simulation.agentReception().getTotalCountOfEmployees(); j++) {
            model.addRow(new Object[]{"Employer " + (j + 1), FREE, DASH});
        }
        
        model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0);
        for (int j = 0; j < simulation.agentParking().getTotalCountOfParkingPlaces(); j++) {
            model.addRow(new Object[]{"Place " + (j + 1), FREE, DASH});
        }
        
        model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0);
        
    }
    
    private void updateTableHeader(JTable table) {
        ((DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(JLabel.CENTER);
    }
    
    private void updateCharts() throws IOException {
        
        for (int i = series.getItemCount(); i < values.size(); i++) {
            series.add(i + offset, values.get(i));
        }
        XYDataset dataset = new XYSeriesCollection(series);
        chart.getXYPlot().setDataset(dataset);
        refreshCharts();
    }
    
    @Override
    public void simStateChanged(Simulation smltn, SimState ss) {
        
    }

    //TODO DEPENDENCIES
    @Override
    public void refresh(Simulation smltn) {
        simulation = (MySimulation) smltn;
        refreshGuiChanges = true;
        
        if (runType == RunType.DEPENDENCY_1) {
            values.add(simulation.getAvgQueueLength().mean());
        } else if (runType == RunType.DEPENDENCY_2) {
            values.add(simulation.getAvgTimeInSystem().mean());
        }
    }
    
    @Override
    public void animatorCreated(IAnimator ia, IAnimator ia1) {
    }
    
    @Override
    public void animatorRemoved(IAnimator ia) {
    }
    
}
